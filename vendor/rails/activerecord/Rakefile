require 'rake'
require 'rake/testtask'
require 'rake/packagetask'
require 'rubygems/package_task'

require File.expand_path(File.dirname(__FILE__)) + "/test/config"
require File.expand_path(File.dirname(__FILE__)) + "/test/support/config"

def run_without_aborting(*tasks)
  errors = []

  tasks.each do |task|
    begin
      Rake::Task[task].invoke
    rescue Exception
      errors << task
    end
  end

  abort "Errors running #{errors.join(', ')}" if errors.any?
end

desc 'Run mysql, mysql2, sqlite, and postgresql tests by default'
task :default => :test

desc 'Run mysql, mysql2, sqlite, and postgresql tests'
task :test do
  tasks = defined?(JRUBY_VERSION) ?
    %w(test_jdbcmysql test_jdbcsqlite3 test_jdbcpostgresql) :
    %w(test_mysql test_mysql2 test_sqlite3 test_postgresql)
  run_without_aborting(*tasks)
end

namespace :test do
  task :isolated do
    tasks = defined?(JRUBY_VERSION) ?
      %w(isolated_test_jdbcmysql isolated_test_jdbcsqlite3 isolated_test_jdbcpostgresql) :
      %w(isolated_test_mysql isolated_test_mysql2 isolated_test_sqlite3 isolated_test_postgresql)
    run_without_aborting(*tasks)
  end
end

%w( mysql mysql2 postgresql sqlite3 firebird db2 oracle sybase openbase frontbase jdbcmysql jdbcpostgresql jdbcsqlite3 jdbcderby jdbch2 jdbchsqldb ).each do |adapter|
  Rake::TestTask.new("test_#{adapter}") { |t|
    adapter_short = adapter == 'db2' ? adapter : adapter[/^[a-z0-9]+/]
    t.libs << 'test'
    t.test_files = (Dir.glob( "test/cases/**/*_test.rb" ).reject {
      |x| x =~ /\/adapters\//
    } + Dir.glob("test/cases/adapters/#{adapter_short}/**/*_test.rb")).sort

    t.verbose = true
    t.warning = true
  }

  task "isolated_test_#{adapter}" do
    adapter_short = adapter == 'db2' ? adapter : adapter[/^[a-z0-9]+/]
    puts [adapter, adapter_short].inspect
    ruby = File.join(*RbConfig::CONFIG.values_at('bindir', 'RUBY_INSTALL_NAME'))
    (Dir["test/cases/**/*_test.rb"].reject {
      |x| x =~ /\/adapters\//
    } + Dir["test/cases/adapters/#{adapter_short}/**/*_test.rb"]).all? do |file|
      sh(ruby, "-Itest", file)
    end or raise "Failures"
  end

  namespace adapter do
    task :test => "test_#{adapter}"
    task :isolated_test => "isolated_test_#{adapter}"

    # Set the connection environment for the adapter
    task(:env) { ENV['ARCONN'] = adapter }
  end

  # Make sure the adapter test evaluates the env setting task
  task "test_#{adapter}" => "#{adapter}:env"
  task "isolated_test_#{adapter}" => "#{adapter}:env"
end

namespace :mysql do
  desc 'Build the MySQL test databases'
  task :build_databases do
    config = ARTest.config['connections']['mysql']
    %x( mysql --user=#{config['arunit']['username']} -e "create DATABASE #{config['arunit']['database']} DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci ")
    %x( mysql --user=#{config['arunit2']['username']} -e "create DATABASE #{config['arunit2']['database']} DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci ")
  end

  desc 'Drop the MySQL test databases'
  task :drop_databases do
    config = ARTest.config['connections']['mysql']
    %x( mysqladmin --user=#{config['arunit']['username']} -f drop #{config['arunit']['database']} )
    %x( mysqladmin --user=#{config['arunit2']['username']} -f drop #{config['arunit2']['database']} )
  end

  desc 'Rebuild the MySQL test databases'
  task :rebuild_databases => [:drop_databases, :build_databases]
end

task :build_mysql_databases => 'mysql:build_databases'
task :drop_mysql_databases => 'mysql:drop_databases'
task :rebuild_mysql_databases => 'mysql:rebuild_databases'


namespace :postgresql do
  desc 'Build the PostgreSQL test databases'
  task :build_databases do
    config = ARTest.config['connections']['postgresql']
    %x( createdb -E UTF8 #{config['arunit']['database']} )
    %x( createdb -E UTF8 #{config['arunit2']['database']} )
  end

  desc 'Drop the PostgreSQL test databases'
  task :drop_databases do
    config = ARTest.config['connections']['postgresql']
    %x( dropdb #{config['arunit']['database']} )
    %x( dropdb #{config['arunit2']['database']} )
  end

  desc 'Rebuild the PostgreSQL test databases'
  task :rebuild_databases => [:drop_databases, :build_databases]
end

task :build_postgresql_databases => 'postgresql:build_databases'
task :drop_postgresql_databases => 'postgresql:drop_databases'
task :rebuild_postgresql_databases => 'postgresql:rebuild_databases'


namespace :frontbase do
  desc 'Build the FrontBase test databases'
  task :build_databases => :rebuild_frontbase_databases

  desc 'Rebuild the FrontBase test databases'
  task :rebuild_databases do
    build_frontbase_database = Proc.new do |db_name, sql_definition_file|
      %(
        STOP DATABASE #{db_name};
        DELETE DATABASE #{db_name};
        CREATE DATABASE #{db_name};

        CONNECT TO #{db_name} AS SESSION_NAME USER _SYSTEM;
        SET COMMIT FALSE;

        CREATE USER RAILS;
        CREATE SCHEMA RAILS AUTHORIZATION RAILS;
        COMMIT;

        SET SESSION AUTHORIZATION RAILS;
        SCRIPT '#{sql_definition_file}';

        COMMIT;

        DISCONNECT ALL;
      )
    end
    config = ARTest.config['connections']['frontbase']
    create_activerecord_unittest  = build_frontbase_database[config['arunit']['database'],  File.join(SCHEMA_ROOT, 'frontbase.sql')]
    create_activerecord_unittest2 = build_frontbase_database[config['arunit2']['database'], File.join(SCHEMA_ROOT, 'frontbase2.sql')]
    execute_frontbase_sql = Proc.new do |sql|
      system(<<-SHELL)
      /Library/FrontBase/bin/sql92 <<-SQL
      #{sql}
      SQL
      SHELL
    end
    execute_frontbase_sql[create_activerecord_unittest]
    execute_frontbase_sql[create_activerecord_unittest2]
  end
end

task :build_frontbase_databases => 'frontbase:build_databases'
task :rebuild_frontbase_databases => 'frontbase:rebuild_databases'

spec = eval(File.read('activerecord.gemspec'))

Gem::PackageTask.new(spec) do |p|
  p.gem_spec = spec
end

task :lines do
  lines, codelines, total_lines, total_codelines = 0, 0, 0, 0

  for file_name in FileList["lib/active_record/**/*.rb"]
    next if file_name =~ /vendor/
    f = File.open(file_name)

    while line = f.gets
      lines += 1
      next if line =~ /^\s*$/
      next if line =~ /^\s*#/
      codelines += 1
    end
    puts "L: #{sprintf("%4d", lines)}, LOC #{sprintf("%4d", codelines)} | #{file_name}"

    total_lines     += lines
    total_codelines += codelines

    lines, codelines = 0, 0
  end

  puts "Total: Lines #{total_lines}, LOC #{total_codelines}"
end


# Publishing ------------------------------------------------------

desc "Release to gemcutter"
task :release => :package do
  require 'rake/gemcutter'
  Rake::Gemcutter::Tasks.new(spec).define
  Rake::Task['gem:push'].invoke
end
